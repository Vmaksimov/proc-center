
/*
 * 
 */

package ru.atc.pgu.proccenter.stub.processingcenter;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 2.2
 * Mon Apr 06 20:46:20 MSK 2015
 * Generated source version: 2.2
 * 
 */


@WebServiceClient(name = "ProcessingCenter", 
                  wsdlLocation = "file:/D:/MedVed/pgu-processing-center/complete/src/main/resources/wsdl/ProcessingCenter.wsdl",
                  targetNamespace = "http://pgu.gosuslugi.ru/ProcessingCenter") 
public class ProcessingCenter_Service extends Service {

    public final static URL WSDL_LOCATION;
    public final static QName SERVICE = new QName("http://pgu.gosuslugi.ru/ProcessingCenter", "ProcessingCenter");
    public final static QName BasicHttpBindingProcessingCenter = new QName("http://pgu.gosuslugi.ru/ProcessingCenter", "BasicHttpBinding_ProcessingCenter");
    static {
        URL url = null;
        try {
            url = new URL("file:/D:/MedVed/pgu-processing-center/complete/src/main/resources/wsdl/ProcessingCenter.wsdl");
        } catch (MalformedURLException e) {
            System.err.println("Can not initialize the default wsdl from file:/D:/MedVed/pgu-processing-center/complete/src/main/resources/wsdl/ProcessingCenter.wsdl");
            // e.printStackTrace();
        }
        WSDL_LOCATION = url;
    }

    public ProcessingCenter_Service(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public ProcessingCenter_Service(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public ProcessingCenter_Service() {
        super(WSDL_LOCATION, SERVICE);
    }

    /**
     * 
     * @return
     *     returns ProcessingCenter
     */
    @WebEndpoint(name = "BasicHttpBinding_ProcessingCenter")
    public ProcessingCenter getBasicHttpBindingProcessingCenter() {
        return super.getPort(BasicHttpBindingProcessingCenter, ProcessingCenter.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns ProcessingCenter
     */
    @WebEndpoint(name = "BasicHttpBinding_ProcessingCenter")
    public ProcessingCenter getBasicHttpBindingProcessingCenter(WebServiceFeature... features) {
        return super.getPort(BasicHttpBindingProcessingCenter, ProcessingCenter.class, features);
    }

}
