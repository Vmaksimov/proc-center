package ru.atc.pgu.proccenter.stub;

import org.apache.commons.io.IOUtils;
import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import ru.atc.pgu.proccenter.DAO.*;
import ru.atc.pgu.proccenter.domain.*;
import ru.atc.pgu.proccenter.stub.processingcenter.*;
import ru.atc.pgu.proccenter.stub.rev120315.AppDataType;
import ru.atc.pgu.proccenter.stub.rev120315.BaseMessageType;
import ru.atc.pgu.proccenter.stub.rev120315.ChangeOrderInfo;
import ru.atc.pgu.proccenter.stub.rev120315.MessageDataType;
import ru.atc.pgu.proccenter.utils.NodeUtils;

import javax.annotation.PostConstruct;
import javax.xml.bind.*;
import javax.xml.datatype.DatatypeConfigurationException;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;
import java.io.StringWriter;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;

/**
 * This class was generated by Apache CXF 3.0.0
 * 2015-02-15T22:09:20.992+04:00
 * Generated source version: 3.0.0
 * 
 */
@org.springframework.stereotype.Service
public class ProcessingCenter_Service implements ProcessingCenter{

    @Autowired
    ParticipantDAO participantDAO;

    @Autowired
    VoterDAO voterDAO;

    @Autowired
    XmlDataDAO xmlDataDAO;

    private static final Logger logger = LoggerFactory.getLogger(ProcessingCenter_Service.class);

    @Autowired
    NumberParticipantDAO numberParticipantDAO;

    @Autowired
    CityDAO cityDAO;

    @Autowired
    SchoolDAO schoolDAO;

    @Autowired
    SchoolClassDAO schoolClassDAO;
    
    public static final String objFactories = "ru.atc.pgu.proccenter.stub.rev120528:ru.atc.pgu.proccenter.stub.processingcenter:ru.atc.pgu.proccenter.stub.include";

    @PostConstruct
    public void generateRegNumbers(){
        long count = numberParticipantDAO.count();
        if (count == 0) {
            List<School> schools = schoolDAO.findAll();
            String s;
            List<NumberParticipant> numberParticipants = new ArrayList<NumberParticipant>();
            for (School school : schools) {
                for (int i = 1; i <= 600; i++) {
                    NumberParticipant numberParticipant = new NumberParticipant();
                    s = "000" + i;
                    numberParticipant.setRegNo(school.getCode() + s.substring(s.length() - 3, s.length()));
                    numberParticipant.setSchool(school);
                    numberParticipants.add(numberParticipant);
                }
            }
            numberParticipantDAO.save(numberParticipants);
        }
    }

    @Override
    public BaseMessageType regNumber(BaseMessageType parameters) {

        JAXBElement<RegNumbersType> regNumbersTypes = (JAXBElement<RegNumbersType>) parameters.getMessageData().getAppData().getAny().get(0);
        List<String> list = regNumbersTypes.getValue().getRegNo();
        if (list.size() != 0) {
            NumberParticipant newNumberParticipant;
            NumberParticipant numberParticipantExisted;
            for (String regNo : list) {
                numberParticipantExisted = numberParticipantDAO.findByRegNo(regNo);
                if (numberParticipantExisted == null) {
                    newNumberParticipant = new NumberParticipant();
                    newNumberParticipant.setRegNo(regNo);
                    numberParticipantDAO.save(newNumberParticipant);
                }
            }
            logger.info("Registration numbers[originRequestIdRef = " + parameters.getMessage().getOriginRequestIdRef() + "]: " + StringUtils.join(list, ", "));
            return responseAppDataTypeWithChangeOrderInfo(parameters, "Идентификационные номера зарегистрированы");
        }else{
            String isUsed = regNumbersTypes.getValue().getIsUsed();
            String schoolCode = regNumbersTypes.getValue().getSchoolCode();
            School schoolDAOByCode = schoolDAO.findByCode(schoolCode);
            List<NumberParticipant> numberParticipants;
            if ((isUsed == null || isUsed.isEmpty()) && (schoolCode != null || schoolCode.isEmpty())) {
                if (schoolCode.equals("undefined"))
                    numberParticipants = numberParticipantDAO.findAll();
                else
                    numberParticipants = numberParticipantDAO.findBySchool(schoolDAOByCode);
            }else if (schoolCode != null && !schoolCode.isEmpty()){
                numberParticipants = numberParticipantDAO.findBySchoolAndIsUsed(schoolDAOByCode, Boolean.parseBoolean(isUsed));
            }else{
                numberParticipants = numberParticipantDAO.findByIsUsed(Boolean.parseBoolean(isUsed));
            }
            if (numberParticipants != null) {
                RegNumbersResponseAppDataType regNumbersResponseAppDataType = new RegNumbersResponseAppDataType();
                RegNumbersResponse regNumbersResponseUsed = new RegNumbersResponse();
                List<String> regNoUsed = regNumbersResponseUsed.getRegNo();
                RegNumbersResponse regNumbersResponseNotUsed = new RegNumbersResponse();
                List<String> regNoNotUsed = regNumbersResponseNotUsed.getRegNo();
                for (NumberParticipant numberParticipant : numberParticipants) {
                    if (isUsed == null || isUsed.isEmpty() || !isUsed.equals("true") || !isUsed.equals("false"))
                        isUsed = String.valueOf(numberParticipant.isUsed());
                    if (isUsed.equals("true")) {
                        regNoUsed.add(numberParticipant.getRegNo());
                    }else{
                        regNoNotUsed.add(numberParticipant.getRegNo());
                    }
                }
                if (regNoNotUsed.size() > 0) regNumbersResponseAppDataType.setNotUsed(regNumbersResponseNotUsed);
                if (regNoUsed.size() > 0) regNumbersResponseAppDataType.setUsed(regNumbersResponseUsed);
                MessageDataType messageData = parameters.getMessageData();
                JAXBElement<RegNumbersResponseAppDataType> getRegNumbers = (new ObjectFactory()).createGetRegNumbers(regNumbersResponseAppDataType);
                AppDataType appDataType = new AppDataType();
                appDataType.getAny().add(getRegNumbers);
                messageData.setAppData(appDataType);
                return parameters;
            }
            return responseAppDataTypeWithChangeOrderInfo(parameters, "Данных по регистрационным номерам нет");
        }
    }

    @Override
    public BaseMessageType registrationAndVote(BaseMessageType parameters) {

        try {
            JAXBElement registrationActionTypeJAXBElement = (JAXBElement) parameters.getMessageData().getAppData().getAny().get(0);
            if (registrationActionTypeJAXBElement.getValue() instanceof RegistrationActionType) {
                RegistrationActionType registrationActionType = (RegistrationActionType) registrationActionTypeJAXBElement.getValue();
                if (registrationActionType.getRegNo() != null) {
                    NumberParticipant numberParticipant = numberParticipantDAO.findByRegNo(registrationActionType.getRegNo());
                    if (numberParticipant != null) {
                        Participant byNumberParticipant = participantDAO.findByNumberParticipant(numberParticipant);
                        if (byNumberParticipant != null) {
                            return responseAppDataTypeWithChangeOrderInfo(parameters, "Участник зарегистрирован ранее");
                        }
                        Participant participant = new Participant();
                        School school = schoolDAO.findByCode(registrationActionType.getFieldDropdownCodeSchoolr());
                        if (school == null) {
                            return responseAppDataTypeWithChangeOrderInfo(parameters, "Школа не найдена");
                        }
                        SchoolClass schoolClass = schoolClassDAO.findByNameAndSchool(registrationActionType.getFieldDropdownClassr(), school);
                        if (schoolClass == null) {
                            return responseAppDataTypeWithChangeOrderInfo(parameters, "Класс для указанной школы не найден");
                        }
                        participant.setSchoolClass(schoolClass);
                        participant.setFio(registrationActionType.getSchoolmanr());
                        participant.setUserIdInitiator(registrationActionType.getUserIdInitiator());
                        XmlData xmlData = xmlDataDAO.findByOriginIdRef(parameters.getMessage().getOriginRequestIdRef());
                        if (xmlData != null) {
                            participant.setXmlData(xmlData);
                        }
                        participant.setNumberParticipant(numberParticipant);
                        City city = cityDAO.findByCode(registrationActionType.getFieldDropdownCodeCityr());
                        city.getParticipant().add(participant);

                        numberParticipant.setUsed(true);

                        participantDAO.save(participant);
                        numberParticipantDAO.save(numberParticipant);
                        cityDAO.save(city);
                                    /*school.getParticipant().add(participant);
                                    schoolDAO.save(school);

                                    schoolClass.getParticipant().add(participant);
                                    schoolClassDAO.save(schoolClass);*/

                        logger.info("Registration action[originRequestIdRef = " + parameters.getMessage().getOriginRequestIdRef() + ", regNo = " + registrationActionType.getRegNo() + "]: successfully");
                    } else {
                        return responseAppDataTypeWithChangeOrderInfo(parameters, "Регистрационный номер не существует");
                    }
                } else {
                    return responseAppDataTypeWithChangeOrderInfoError(parameters, "element 'RegNo' cannot be null");
                }
                return responseAppDataTypeWithChangeOrderInfo(parameters, "Участник зарегистрирован в акции");
            } else if (registrationActionTypeJAXBElement.getValue() instanceof VoteType) {
                VoteType voteType = (VoteType) registrationActionTypeJAXBElement.getValue();

                Voter voterDAOByUserId = voterDAO.findByUserId(voteType.getUserId());
                if (voterDAOByUserId != null) {
                    return responseAppDataTypeWithChangeOrderInfo(parameters, "Вы уже проголосовали ранее");
                }
                Voter voter = new Voter();
                voter.setFio(voteType.getFioVoter());
                voter.setUserId(voteType.getUserId());
                voter.setDate(new Date());
                XmlData xmlData = xmlDataDAO.findByOriginIdRef(parameters.getMessage().getOriginRequestIdRef());
                if (xmlData != null) {
                    voter.setXmlData(xmlData);
                }
                NumberParticipant numberParticipant = numberParticipantDAO.findByRegNo(voteType.getRegNo());
                if (numberParticipant != null) {
                    Participant participant = participantDAO.findByNumberParticipant(numberParticipant);
                    participant.getVoter().add(voter);
                    participant.setCountVoter(participant.getVoter().size());
                    participant.setDateLastVoter(voter.getDate());
                    participantDAO.save(participant);
//                            voter.setParticipant(participant);
//                            voterDAO.save(voter);
                    logger.info("Vote[originRequestIdRef = " + parameters.getMessage().getOriginRequestIdRef() + ", regNo = " + voteType.getRegNo() + ", voteUserId = " + voteType.getUserId() + "]: successfully");

                } else {
                    return responseAppDataTypeWithChangeOrderInfo(parameters, "Регистрационный номер не существует");
                }
                return responseAppDataTypeWithChangeOrderInfo(parameters, "Голосование прошло успешно");
            }
        }catch (Exception e){
            return responseAppDataTypeWithChangeOrderInfoError(parameters, "Ошибка["+ parameters.getMessage().getOriginRequestIdRef() +"]: " + e.getLocalizedMessage());
        }
        return responseAppDataTypeWithChangeOrderInfoError(parameters, "Непредвиденная ситуация");
    }

    @Override
    public BaseMessageType dictionary(BaseMessageType parameters) {
        JAXBElement<SearchParticipantsByFieldType> dicType = (JAXBElement<SearchParticipantsByFieldType>) parameters.getMessageData().getAppData().getAny().get(0);
        String cityCode = dicType.getValue().getCityCode();
        String schoolCode = dicType.getValue().getSchoolCode();
        SearchCitiesResponseAppDataType responseAppDataType = new SearchCitiesResponseAppDataType();
        if (cityCode.trim().equalsIgnoreCase("undefined")){
            List<City> cities = cityDAO.findAll();
            for (City city: cities) {
                genDeepCity(null, responseAppDataType, city);
            }
        }else{
            if (schoolCode == null) schoolCode = "undefined";
            City city = cityDAO.findByCode(cityCode);
            genDeepCity(schoolCode, responseAppDataType, city);
        }
        generateAppData(parameters, responseAppDataType);
        return parameters;
    }

    private void genDeepCity(String schoolCode, SearchCitiesResponseAppDataType responseAppDataType, City city) {
        CityType cityType = new CityType();
        if (schoolCode != null){
            if (schoolCode.equals("undefined")){
                List<School> schoolList = schoolDAO.findByCity(city);
                for (School school: schoolList){
                    SchoolType schoolType = new SchoolType();
                    schoolType.setSchoolCode(school.getCode());
                    schoolType.setSchoolName(school.getName());
                    cityType.getSchool().add(schoolType);
                }
            }else {
                School school = schoolDAO.findByCode(schoolCode);
                if (school != null) {
                    SchoolType schoolType = new SchoolType();
                    List<SchoolClass> schoolClasses = schoolClassDAO.findBySchool(school);
                    SchoolClassType schoolClassType;
                    if (schoolClasses != null) {
                        for (SchoolClass schoolClass : schoolClasses) {
                            schoolClassType = new SchoolClassType();
                            schoolClassType.setClassName(schoolClass.getName());
                            schoolType.getSchoolClass().add(schoolClassType);
                        }
                    }
                    schoolType.setSchoolCode(school.getCode());
                    schoolType.setSchoolName(school.getName());
                    cityType.getSchool().add(schoolType);
                }
            }
        }
        cityType.setCityCode(city.getCode());
        cityType.setCityName(city.getName());
        responseAppDataType.getCity().add(cityType);
    }




    private void genDeepCityParticipantNotNull(String schoolCode, String schoolClassName, SearchCitiesResponseAppDataType responseAppDataType, City city, SearchResponseAppDataType searchResponseAppDataType) {
        CityType cityType = new CityType();
        if (schoolCode != null){
            if (schoolCode.equals("undefined")){
                List<School> schoolList = schoolDAO.findByCityAndParticipantNotNull(city.getCode());
                for (School school: schoolList){
                    SchoolType schoolType = new SchoolType();
                    schoolType.setSchoolCode(school.getCode());
                    schoolType.setSchoolName(school.getName());
                    cityType.getSchool().add(schoolType);
                }
            }else {
                School school = schoolDAO.findByCodeAndCityAndParticipantNotNull(schoolCode, city.getCode());
                if (school != null) {
                    SchoolType schoolType = new SchoolType();
                    SchoolClassType schoolClassType = new SchoolClassType();
                    if (schoolClassName == null){
                        List<SchoolClass> schoolClasses = schoolClassDAO.findBySchoolAndParticipantNotNull(school.getCode());
                        if (schoolClasses != null) {
                            for (SchoolClass schoolClass : schoolClasses) {
                                schoolClassType = new SchoolClassType();
                                schoolClassType.setClassName(schoolClass.getName());
                                schoolType.getSchoolClass().add(schoolClassType);
                            }

                        }

                    }else{
                        SchoolClass schoolClass = schoolClassDAO.findByNameAndSchoolAndParticipantNotNull(schoolClassName, school.getCode());
                        if (schoolClass != null) {
                            schoolClassType.setClassName(schoolClass.getName());
                            List<Participant> participants = participantDAO.findBySchoolClass(schoolClass);
//                            List<Participant> participants = schoolClass.getParticipant();
                            for (Participant participant : participants) {

                                generateParticipants(schoolClassType, participant);
                            }
                            schoolType.getSchoolClass().add(schoolClassType);
                        }

                    }
                    schoolType.setSchoolCode(school.getCode());
                    schoolType.setSchoolName(school.getName());
                    cityType.getSchool().add(schoolType);

                }
            }
        }
        cityType.setCityCode(city.getCode());
        cityType.setCityName(city.getName());
        responseAppDataType.getCity().add(cityType);
    }


    @Override
    public BaseMessageType searchParticipants(BaseMessageType parameters) {
        JAXBElement<SearchParticipantsType> searchParticipantsTypeJAXBElement = (JAXBElement<SearchParticipantsType>) parameters.getMessageData().getAppData().getAny().get(0);
        SearchParticipantsType searchParticipantsType = searchParticipantsTypeJAXBElement.getValue();
        SearchResponseAppDataType searchResponseAppDataType = new SearchResponseAppDataType();
        if (searchParticipantsType.getSearchParticipantsByField() != null){
            String cityCode = searchParticipantsType.getSearchParticipantsByField().getCityCode();
            String schoolClass = searchParticipantsType.getSearchParticipantsByField().getSchoolClass();
            String schoolCode = searchParticipantsType.getSearchParticipantsByField().getSchoolCode();
            SearchCitiesResponseAppDataType responseAppDataType = new SearchCitiesResponseAppDataType();
            if (cityCode.trim().equalsIgnoreCase("undefined")){
                List<City> cities = cityDAO.findAllNotNullParticipant();
                for (City city: cities) {
                    genDeepCityParticipantNotNull(null, null, responseAppDataType, city, null);
                }
            }else{
                if (schoolCode == null) schoolCode = "undefined";
                City city = cityDAO.findByCode(cityCode);
                genDeepCityParticipantNotNull(schoolCode, schoolClass, responseAppDataType, city, searchResponseAppDataType);
            }
            generateAppData(parameters, responseAppDataType);
            return parameters;
        }else if (searchParticipantsType.getSearchParticipantsByFIO() != null){
            String fioParticipant = searchParticipantsType.getSearchParticipantsByFIO().getFIOParticipant();
//            String userIdInitiator = searchParticipantsType.getSearchParticipantsByFIO().getUserIdInitiator();
            List<Participant> participants = participantDAO.findByFio(fioParticipant);
            for (Participant participant: participants) {
                /*if (participant.getUserIdInitiator().equals(userIdInitiator)) {   // если просматривающий зарегистрировал участника
                    List<Voter> voters = participant.getVoter();
                    for (Voter voter: voters){
                        DataVoterType dataVoterType = new DataVoterType();
                        dataVoterType.setDate(getXmlGregorianCalendar(voter.getDate()));
                        dataVoterType.setFioVoter(voter.getFio());
                        searchResponseAppDataType.getDataVoter().add(dataVoterType);
                    }
                }else{  */                                                                // если просматривающий не регистрировал участника
                    generateParticipants(searchResponseAppDataType, participant);
//                }
            }
        }else if (searchParticipantsType.getSearchParticipantsByInitiator() != null){
//            String fioParticipant = searchParticipantsType.getSearchParticipantsByInitiator().getFIOParticipant();
            String userIdInitiator = searchParticipantsType.getSearchParticipantsByInitiator().getUserIdInitiator();
            if (userIdInitiator == null){
                return responseAppDataTypeWithChangeOrderInfo(parameters, "UserIdInitiator cannot be null");
            }
            List<Participant> participants = participantDAO.findByUserIdInitiator(userIdInitiator);
            for (Participant participant: participants) {

                List<Voter> voters = participant.getVoter();
                    for (Voter voter : voters) {
                        DataVoterType dataVoterType = new DataVoterType();
                        dataVoterType.setDate(getXmlGregorianCalendar(voter.getDate()));
                        dataVoterType.setFioVoter(voter.getFio());
                        searchResponseAppDataType.getDataVoter().add(dataVoterType);
                    }
            }
        }else if (searchParticipantsType.getSearchTOP() != null){
            BigInteger count = searchParticipantsType.getSearchTOP().getCount();
            String cityCode = searchParticipantsType.getSearchTOP().getCityCode();
            List<Participant> participants;
            if (cityCode != null){
                participants = participantDAO.findTopByCityOrderByCountVoter(cityCode, count.intValue());
            }else{
                participants = participantDAO.findTopOrderByCountVoter(count.intValue());
            }
            for (Participant participant: participants) {
                generateParticipants(searchResponseAppDataType, participant);
            }
    }
        generateAppData(parameters, searchResponseAppDataType);
        return parameters;
    }


    private void generateAppData(BaseMessageType parameters, SearchResponseAppDataType searchResponseAppDataType) {
        MessageDataType messageData = parameters.getMessageData();
        JAXBElement<SearchResponseAppDataType> responseAppDataTypeJAXBElement = (new ObjectFactory()).createSearchResponse(searchResponseAppDataType);
        AppDataType appDataType = new AppDataType();
        appDataType.getAny().add(responseAppDataTypeJAXBElement);
        messageData.setAppData(appDataType);
    }

    private void generateAppData(BaseMessageType parameters, SearchCitiesResponseAppDataType searchResponseAppDataType) {
        MessageDataType messageData = parameters.getMessageData();
        JAXBElement<SearchCitiesResponseAppDataType> responseAppDataTypeJAXBElement = (new ObjectFactory()).createSearchCitiesResponse(searchResponseAppDataType);
        AppDataType appDataType = new AppDataType();
        appDataType.getAny().add(responseAppDataTypeJAXBElement);
        messageData.setAppData(appDataType);
    }

    private void generateAppData(BaseMessageType parameters, CityType cityType) {
        MessageDataType messageData = parameters.getMessageData();
        JAXBElement<CityType> responseAppDataTypeJAXBElement = (new ObjectFactory()).createSearchSchoolResponse(cityType);
        AppDataType appDataType = new AppDataType();
        appDataType.getAny().add(responseAppDataTypeJAXBElement);
        messageData.setAppData(appDataType);
    }

    private void generateAppData(BaseMessageType parameters, SchoolClassType schoolClassType) {
        MessageDataType messageData = parameters.getMessageData();
        JAXBElement<SchoolClassType> responseAppDataTypeJAXBElement = (new ObjectFactory()).createSearchSchoolClassResponse(schoolClassType);
        AppDataType appDataType = new AppDataType();
        appDataType.getAny().add(responseAppDataTypeJAXBElement);
        messageData.setAppData(appDataType);
    }

    private void generateAppData(BaseMessageType parameters, RegistrationActionType registrationActionType) {
        MessageDataType messageData = parameters.getMessageData();
        JAXBElement<RegistrationActionType> responseAppDataTypeJAXBElement = (new ObjectFactory()).createSearchParticipantResponse(registrationActionType);
        AppDataType appDataType = new AppDataType();
        appDataType.getAny().add(responseAppDataTypeJAXBElement);
        messageData.setAppData(appDataType);
    }

    private XMLGregorianCalendar getXmlGregorianCalendar(Date date) {
        XMLGregorianCalendar xmlGregorianCalendar = null;
        try {
            GregorianCalendar calendar = new GregorianCalendar();
            calendar.setTime(date);
            xmlGregorianCalendar = DatatypeFactory.newInstance().newXMLGregorianCalendar(calendar);
        } catch (DatatypeConfigurationException e) {
            e.printStackTrace();
        }
        return xmlGregorianCalendar;
    }

    private void generateParticipants(SchoolClassType schoolClassType, Participant participant) {
        RegistrationActionType registrationActionType = new RegistrationActionType();
        registrationActionType.setRegNo(participant.getNumberParticipant().getRegNo());
        registrationActionType.setSchoolmanr(participant.getFio());
        registrationActionType.setUserIdInitiator(participant.getUserIdInitiator());

        schoolClassType.getParticipant().add(registrationActionType);
    }

    private void generateParticipants(SearchResponseAppDataType searchResponseAppDataType, Participant participant) {
        RegistrationActionType registrationActionType = new RegistrationActionType();
        ResultParticipantType resultParticipantType = new ResultParticipantType();
        registrationActionType.setRegNo(participant.getNumberParticipant().getRegNo());
        registrationActionType.setSchoolmanr(participant.getFio());
        registrationActionType.setUserIdInitiator(participant.getUserIdInitiator());
        if (participant.getSchoolClass() != null){
            if (participant.getSchoolClass().getSchool() != null){
                registrationActionType.setFieldDropdownNameSchoolr(participant.getSchoolClass().getSchool().getName());
                if (participant.getSchoolClass().getSchool().getCity() != null)
                    registrationActionType.setFieldDropdownNameCityr(participant.getSchoolClass().getSchool().getCity().getName());
            }
            registrationActionType.setFieldDropdownClassr(participant.getSchoolClass().getName());
        }
        resultParticipantType.setParticipant(registrationActionType);
        resultParticipantType.setCountVotes(String.valueOf(participant.getCountVoter()));

        searchResponseAppDataType.getResultParticipant().add(resultParticipantType);
    }



    protected static Object convertXmlToPojo(String xml, String objFactories) {
        Object pojo;
        try {
            Unmarshaller jaxbUnmarshaller = getUnmarshaller(objFactories);
            pojo = jaxbUnmarshaller.unmarshal(IOUtils.toInputStream(xml));
        } catch (JAXBException e) {
            throw new RuntimeException(e);
        }
        return pojo;
    }

    public static Object convertXmlToPojoJaxbEl(String xml, String objFactories) {
        JAXBElement jaxbElement;
        try {
            Unmarshaller jaxbUnmarshaller = getUnmarshaller(objFactories);
            jaxbElement = (JAXBElement)jaxbUnmarshaller.unmarshal(IOUtils.toInputStream(xml));
        } catch (JAXBException e) {
            throw new RuntimeException(e);
        }
        return jaxbElement.getValue();
    }

    private static Unmarshaller getUnmarshaller(String objFactories) throws JAXBException {
        JAXBContext jaxbContext = JAXBContext.newInstance(objFactories);
        return jaxbContext.createUnmarshaller();
    }
    private String getForm(EntityFileContent file) {
        return NodeUtils.getChildString("http://smev.gosuslugi.ru/request/fed/rev120528", "Form", file.getContent());
    }

    private List<EntityFileContent> getEntityFileContents(BaseMessageType parameters) {
        byte[] binaryData = parameters.getMessageData().getAppDocument().getBinaryData();
        return AppliedDoc.unZip(binaryData);
    }

    protected static String convertPojoToXml(Object pojo, String objFactories) {
        String result = "";
        StringWriter sw = new StringWriter();
        try {
            Marshaller marshaller = getMarshaller(objFactories);
            marshaller.marshal(pojo, sw);
            result = sw.toString();
        } catch (JAXBException e) {
            throw new RuntimeException(e);
        }
        return result;
    }

    private static Marshaller getMarshaller(String objFactories) throws JAXBException {
        JAXBContext jaxbContext = JAXBContext.newInstance(objFactories);
        Marshaller marshaller = jaxbContext.createMarshaller();
        marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);
        return marshaller;
    }

    protected static String convertPojoToXmlJaxbEl(JAXBElement jaxbElement, String objFactories) {
        String result = "";
        StringWriter sw = new StringWriter();
        try {
            Marshaller marshaller = getMarshaller(objFactories);
            marshaller.marshal(jaxbElement, sw);
            result = sw.toString();
        } catch (JAXBException e) {
            throw new RuntimeException(e);
        }
        return result;
    }
    private BaseMessageType responseAppDataTypeWithChangeOrderInfo(BaseMessageType parameters, String resultMessage) {
        MessageDataType messageData = parameters.getMessageData();
        messageData.setAppDocument(null);
        ChangeOrderInfo changeOrderInfo = new ChangeOrderInfo();
        ChangeOrderInfo.StatusCode statusCode = new ChangeOrderInfo.StatusCode();
        statusCode.setTechCode("3");
        changeOrderInfo.setStatusCode(statusCode);
        changeOrderInfo.setComment(resultMessage);
        AppDataType appDataType = new AppDataType();
        appDataType.getAny().add(changeOrderInfo);
        messageData.setAppData(appDataType);
        return parameters;
    }

    private BaseMessageType responseAppDataTypeWithChangeOrderInfoError(BaseMessageType parameters, String resultMessage) {
        MessageDataType messageData = parameters.getMessageData();
        messageData.setAppDocument(null);
        ChangeOrderInfo changeOrderInfo = new ChangeOrderInfo();
        ChangeOrderInfo.StatusCode statusCode = new ChangeOrderInfo.StatusCode();
        statusCode.setTechCode("-1");
        changeOrderInfo.setStatusCode(statusCode);
        changeOrderInfo.setComment(resultMessage);
        AppDataType appDataType = new AppDataType();
        appDataType.getAny().add(changeOrderInfo);
        messageData.setAppData(appDataType);
        return parameters;
    }
}
